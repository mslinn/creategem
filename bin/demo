#!/usr/bin/env ruby

require 'fileutils'
require 'open3'
require 'thor'

module NugemDemo
  def self.run(command, input)
    shell = Thor::Shell::Color.new
    shell.say command, :yellow
    Open3.popen3(command) do |stdin, stdout, stderr, thread|
      Thread.new do
        input.split("\n").each { |line| stdin.puts line }
      end

      stdout.each_line { |line| puts line }

      Thread.new do
        until (line = stderr.gets).nil?
          yield nil, line, thread
        end
      end

      thread.join
    end
  end

  class Demo
    def initialize
      # FileUtils.rm_rf 'demo'

      @shell = Thor::Shell::Color.new

      gem_type = ARGV[0] || 'jekyll'
      @gem_type = @shell.ask 'Type of gem to test.', :green, default:    gem_type,
                                                             limited_to: %w[jekyll plain rails]

      @gem_name = ARGV[1] || @shell.ask('Name of the gem.', :green, default: 'test')

      case @gem_type
      when 'plain'
        plain_info

      when 'jekyll'
        jekyll_info

      when 'rails'
        abort 'TODO: Write rails demo'
      end
    end

    def jekyll_info
      @jekyll_type = @shell.ask 'Type of Jekyll plugin.', :green, default: 'tag', limited_to: %w[block tag filter]
      loop do
        @jekyll_name = @shell.ask "#{@jekyll_type.capitalize} name:", :green
        break unless @jekyll_name.empty?
      end
      @jekyll_parameter_names = @shell.ask('Jekyll parameter names.', :green).split(/[, ]/)
      @jekyll_parameter_types = @jekyll_parameter_names.map do |name|
        @shell.ask "#{name} type", :green, default: 'string', limited_to: %w[string numeric]
      end
      input = <<~END_INFO
        #{@jekyll_parameter_names.join ' '}
        #{@jekyll_parameter_types.join "\n"}
        no
      END_INFO
      NugemDemo.run "exe/nugem #{@gem_type} #{@gem_name} --#{@jekyll_type} #{@jekyll_name}", input
    end

    def plain_info
      NugemDemo.run "exe/nugem #{@gem_type} #{@gem_name}"
    end
  end

  Demo.new
end
